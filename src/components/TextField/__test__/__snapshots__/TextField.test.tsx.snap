// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing Textfield component should call the handleChange event and the value should be '123' by using type=numbers 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="primary-container"
        data-testid="textfield"
      >
        <label>
          <p
            class="primary-label"
          >
            <b>
              Testing
            </b>
          </p>
          <input
            class="textField undefined"
            datatestid="textfield"
            type="numbers"
            variant="primary"
          />
        </label>
        <div
          class="error"
        >
          <span
            class="message-error undefined small"
          >
            <b />
          </span>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="primary-container"
      data-testid="textfield"
    >
      <label>
        <p
          class="primary-label"
        >
          <b>
            Testing
          </b>
        </p>
        <input
          class="textField undefined"
          datatestid="textfield"
          type="numbers"
          variant="primary"
        />
      </label>
      <div
        class="error"
      >
        <span
          class="message-error undefined small"
        >
          <b />
        </span>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Testing Textfield component should call the handleChange event and the value should be 'pass' by using type=password 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="primary-container"
        data-testid="textfield"
      >
        <label>
          <p
            class="primary-label"
          >
            <b>
              Testing
            </b>
          </p>
          <input
            class="textField undefined"
            datatestid="textfield"
            type="password"
            variant="primary"
          />
        </label>
        <div
          class="error"
        >
          <span
            class="message-error undefined small"
          >
            <b />
          </span>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="primary-container"
      data-testid="textfield"
    >
      <label>
        <p
          class="primary-label"
        >
          <b>
            Testing
          </b>
        </p>
        <input
          class="textField undefined"
          datatestid="textfield"
          type="password"
          variant="primary"
        />
      </label>
      <div
        class="error"
      >
        <span
          class="message-error undefined small"
        >
          <b />
        </span>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Testing Textfield component should call the handleChange event and the value should be 'test' by using type=text 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="primary-container"
        data-testid="textfield"
      >
        <label>
          <p
            class="primary-label"
          >
            <b>
              Testing
            </b>
          </p>
          <input
            class="textField undefined"
            datatestid="textfield"
            type="text"
            variant="primary"
          />
        </label>
        <div
          class="error"
        >
          <span
            class="message-error undefined small"
          >
            <b />
          </span>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="primary-container"
      data-testid="textfield"
    >
      <label>
        <p
          class="primary-label"
        >
          <b>
            Testing
          </b>
        </p>
        <input
          class="textField undefined"
          datatestid="textfield"
          type="text"
          variant="primary"
        />
      </label>
      <div
        class="error"
      >
        <span
          class="message-error undefined small"
        >
          <b />
        </span>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Testing Textfield component should show the message 'Text is not allowed' if I write text when the type=numbers 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="primary-container"
        data-testid="textfield"
      >
        <label>
          <p
            class="primary-label"
          >
            <b>
              Testing
            </b>
          </p>
          <input
            class="textField undefined"
            datatestid="textfield"
            type="numbers"
            variant="primary"
          />
        </label>
        <div
          class="error"
        >
          <span
            class="message-error undefined small"
          >
            <b>
              Text is not allowed
            </b>
          </span>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="primary-container"
      data-testid="textfield"
    >
      <label>
        <p
          class="primary-label"
        >
          <b>
            Testing
          </b>
        </p>
        <input
          class="textField undefined"
          datatestid="textfield"
          type="numbers"
          variant="primary"
        />
      </label>
      <div
        class="error"
      >
        <span
          class="message-error undefined small"
        >
          <b>
            Text is not allowed
          </b>
        </span>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Testing Textfield component shouldn't show the message 'Text is not allowed' if I write text when the type=text 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="primary-container"
        data-testid="textfield"
      >
        <label>
          <p
            class="primary-label"
          >
            <b>
              Testing
            </b>
          </p>
          <input
            class="textField undefined"
            datatestid="textfield"
            type="text"
            variant="primary"
          />
        </label>
        <div
          class="error"
        >
          <span
            class="message-error undefined small"
          >
            <b />
          </span>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="primary-container"
      data-testid="textfield"
    >
      <label>
        <p
          class="primary-label"
        >
          <b>
            Testing
          </b>
        </p>
        <input
          class="textField undefined"
          datatestid="textfield"
          type="text"
          variant="primary"
        />
      </label>
      <div
        class="error"
      >
        <span
          class="message-error undefined small"
        >
          <b />
        </span>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
